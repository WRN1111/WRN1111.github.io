<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>凝紫暮</title><link>https://WRN1111.github.io/</link><description>Recent content on 凝紫暮</description><generator>Hugo -- 0.150.0</generator><language>en-us</language><lastBuildDate>Sat, 13 Sep 2025 12:43:29 +0000</lastBuildDate><atom:link href="https://WRN1111.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello World</title><link>https://WRN1111.github.io/posts/hello-world/</link><pubDate>Sat, 13 Sep 2025 12:43:29 +0000</pubDate><guid>https://WRN1111.github.io/posts/hello-world/</guid><description>&lt;p&gt;这是我的第一篇 Hugo 博客！&lt;/p&gt;</description></item><item><title>国外VPS搭建节点教程</title><link>https://WRN1111.github.io/posts/vps%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</link><pubDate>Sat, 13 Sep 2025 12:43:29 +0000</pubDate><guid>https://WRN1111.github.io/posts/vps%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</guid><description>&lt;p&gt;首先购买VPS，注意最好有原生的IPV4，纯IPV6的话去Github拉取东西都费劲。&lt;/p&gt;
&lt;p&gt;地域为了延迟可以选香港，但是香港是GPT不支持的地方，哪怕套了CF照样不支持，所以优先台湾，日本。&lt;/p&gt;
&lt;p&gt;注意！只看“KVM VPS”，其它的比如“Hosting”是拿来建网站的，不能拿来翻墙。&lt;/p&gt;
&lt;p&gt;目前有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;VLESS + WebSocket + TLS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传输层：&lt;/p&gt;
&lt;p&gt;使用 WebSocket（WS）作为传输，表面上看起来像普通的 HTTPS 流量。&lt;/p&gt;
&lt;p&gt;加密：&lt;/p&gt;
&lt;p&gt;依赖 TLS（通常配合域名证书，比如 Cloudflare、Let’s Encrypt）。&lt;/p&gt;
&lt;p&gt;需要一个 域名，而且证书要合法。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;p&gt;可以伪装成正常的网站流量。&lt;/p&gt;
&lt;p&gt;很常见，教程多、兼容性强。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;必须要域名、证书。&lt;/p&gt;
&lt;p&gt;流量特征虽然像 HTTPS，但还是容易被 DPI 检测到 WS 模式。&lt;/p&gt;
&lt;p&gt;需要额外配置（Nginx/Caddy/Cloudflare 等）。&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;VLESS + Reality&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传输层：&lt;/p&gt;
&lt;p&gt;不用 WebSocket，也不用真正的网站。&lt;/p&gt;
&lt;p&gt;通过 Reality 技术来“伪造”一个看起来像 TLS 的握手。&lt;/p&gt;
&lt;p&gt;加密：&lt;/p&gt;
&lt;p&gt;内部是 基于 XTLS 的加密传输，客户端和服务端共享一个公钥/私钥。&lt;/p&gt;
&lt;p&gt;不需要申请域名和证书。&lt;/p&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;p&gt;它会模拟访问一个大网站（比如 &lt;a href="https://www.microsoft.com"&gt;www.microsoft.com&lt;/a&gt; 或 &lt;a href="https://www.cloudflare.com"&gt;www.cloudflare.com&lt;/a&gt;），让流量看起来完全像真实的 TLS。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;p&gt;免域名、免证书，部署更简单。&lt;/p&gt;
&lt;p&gt;伪装效果更强，几乎就是正经网站的 TLS 流量。&lt;/p&gt;
&lt;p&gt;性能更好，延迟更低。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;需要支持 Reality 的客户端（比较新的 Clash / v2rayN / sing-box 等）。&lt;/p&gt;</description></item><item><title>简易版CICD流程</title><link>https://WRN1111.github.io/posts/vps%E7%AE%80%E5%8D%95%E7%94%A8%E9%80%94/</link><pubDate>Sat, 13 Sep 2025 12:43:29 +0000</pubDate><guid>https://WRN1111.github.io/posts/vps%E7%AE%80%E5%8D%95%E7%94%A8%E9%80%94/</guid><description>&lt;p&gt;🔧 目标&lt;/p&gt;
&lt;p&gt;多个 GitHub 仓库（a-service、b-service、c-service …）&lt;/p&gt;
&lt;p&gt;每个仓库 push → GitHub Actions：&lt;/p&gt;
&lt;p&gt;编译打包 jar&lt;/p&gt;
&lt;p&gt;构建 Docker 镜像&lt;/p&gt;
&lt;p&gt;推送到 Docker Hub（或 GHCR、阿里云仓库等）&lt;/p&gt;
&lt;p&gt;服务器运行一个统一的 docker-compose.yml，里面声明 a、b、c 服务 + 公共依赖（mysql、redis 等）&lt;/p&gt;
&lt;p&gt;watchtower 常驻，检测到新镜像 → 自动拉取并更新对应容器&lt;/p&gt;
&lt;p&gt;服务之间通过 docker 网络 互相调用（容器名就是主机名）&lt;/p&gt;
&lt;p&gt;🏗️ 架构图&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;GitHub Repo A ----&amp;gt; GitHub Actions ----&amp;gt; Docker Hub (a-service:latest) --+
|
GitHub Repo B ----&amp;gt; GitHub Actions ----&amp;gt; Docker Hub (b-service:latest) --+--&amp;gt; VPS (docker-compose + watchtower)
|
GitHub Repo C ----&amp;gt; GitHub Actions ----&amp;gt; Docker Hub (c-service:latest) --+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;⚙️ 关键点配置
1️⃣ 每个仓库的 GitHub Actions&lt;/p&gt;</description></item></channel></rss>